version: '3.8'

# Production Docker Compose configuration for MCDN
# This file extends the base docker-compose.yml for production use

services:
  # MCDN Application - Production Configuration
  mcdn:
    image: mcdn:latest
    container_name: mcdn-prod
    restart: always
    ports:
      - "80:3000"
      - "443:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      HOST: 0.0.0.0
      LOG_LEVEL: warn
      
      # Production cache settings
      CACHE_MODE: redis-cassandra
      CACHE_TTL: 3600
      CACHE_MAX_ITEMS: 10000
      CACHE_MAX_SIZE: 1073741824  # 1GB
      
      # Production Redis settings
      REDIS_MAX_RETRIES: 5
      REDIS_CONNECT_TIMEOUT: 10000
      REDIS_COMMAND_TIMEOUT: 5000
      
      # Production Cassandra settings
      CASSANDRA_REPLICATION_FACTOR: 3
      CASSANDRA_CONSISTENCY: QUORUM
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    volumes:
      - /var/log/mcdn:/app/logs
      - /var/cache/mcdn:/app/cache
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/proxy/status"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis - Production Configuration
  redis:
    image: redis:7-alpine
    container_name: mcdn-redis-prod
    restart: always
    ports:
      - "6379:6379"
    command: >
      redis-server
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
    volumes:
      - /var/lib/redis:/data
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '0.5'
        reservations:
          memory: 1G
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Cassandra - Production Configuration
  cassandra:
    image: cassandra:4.1
    container_name: mcdn-cassandra-prod
    restart: always
    ports:
      - "9042:9042"
    environment:
      CASSANDRA_CLUSTER_NAME: mcdn-prod-cluster
      CASSANDRA_DC: datacenter1
      CASSANDRA_RACK: rack1
      CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
      CASSANDRA_NUM_TOKENS: 256
      MAX_HEAP_SIZE: 2G
      HEAP_NEWSIZE: 400M
      CASSANDRA_CONCURRENT_READS: 32
      CASSANDRA_CONCURRENT_WRITES: 32
      CASSANDRA_CONCURRENT_COMPACTORS: 4
    volumes:
      - /var/lib/cassandra:/var/lib/cassandra
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 3G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "SELECT now() FROM system.local"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 180s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: mcdn-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - mcdn
    networks:
      - mcdn-network
    profiles:
      - nginx

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: mcdn-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mcdn-network
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: mcdn-grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - mcdn-network
    profiles:
      - monitoring

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  mcdn-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16